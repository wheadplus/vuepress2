(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{351:function(t,s,a){"use strict";a.r(s);var n=a(33),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"执行环境及作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行环境及作用域"}},[t._v("#")]),t._v(" 执行环境及作用域")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("执行环境")]),t._v("（简称为"),a("code",[t._v("环境")]),t._v("）是JavaScript中的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定它们各自的行为。每个执行环境都有一个与之相关联的"),a("code",[t._v("变量对象")]),t._v("，环境中定义的所有变量和函数都保存在这个对象中。虽然我们无法访问到该对象，但解析器在处理数据时会在后台使用它。")])]),t._v(" "),a("p",[t._v("全局执行环境是最外围的一个执行环境。在浏览器中，就是"),a("code",[t._v("window")]),t._v("对象。")]),t._v(" "),a("p",[t._v("每个函数都有自己的"),a("code",[t._v("执行环境")]),t._v("。当执行流进入一个函数时，函数的环境被推入一个环境栈中。函数执行后，栈将其环境弹出，把控制权返回给之前的执行环境。")]),t._v(" "),a("h5",{attrs:{id:"作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),a("p",[t._v("当代码咋一个环境中执行，会创建·变量对象的一个作用域链。它的作用保证环境的所有变量和函数的有序访问。也就是全局环境执行，执行到函数时，进入下一层环境继续执行。如内部有函数，继续下层执行。每次函数执行后，返回之前的环境中。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'green'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeColor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'green'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'red'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blue'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeColor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("changeColor有的作用域链有两个对象，全局环境和它本身的环境。可以在函数内部访问到变量"),a("code",[t._v("color")]),t._v("，就是因为可以在这个作用域链中找到它。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("执行环境保存了它的变量和函数。")]),t._v(" "),a("li",[t._v("函数有它自己的执行环境。")]),t._v(" "),a("li",[t._v("函数执行的时候，先从内部环境找变量")]),t._v(" "),a("li",[t._v("如果找不到，通过作用域链在上层环境中寻找。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);